type Test {
    abc: String
    wasd: String
}

type Document {
    test: Test,
    test2: String
}

type Collection {
    getDocuments(id: String): [Document]
}

type Query {
    getCollections(name: String!): Collection
}



{
		"schema": {
				"type Query": {
						"getCollections": {
								"params": {
										"name": "String!"
								},
								"return": "Collection"
						}
				},
				"type Collection": {
						"getDocuments": {
								"params": {
										"_id": "String"
								},
								"return": "[Document]"
						}
				},
				"type Document": {
						"abc": {
								"return": "String"
						},
						"qwe": {
								"return": "QWE"
						},
						"wasd": {
								"return": "String"
						}
				},
			"type QWE": {
					"test": {
							"return": "String"
					},
					"test2": {
							"return": "String"
					}
			}
		}
}


{
    type Query {
        getCollection1 (_id: ID, field1: String, field2: Int): [Collection1.Document]
        getCollection2 (_id: ID, field9: Int, field8: Boolean): [Collection2.Document]
    }

    type Collection1.Document {
        _id: ID
        field1: String
        field2: Int
        field3: Test
    }

    type Test {
        test1: String
        test2: String
    }

    type Collection2.Document {
        _id: ID
        field9: Int
        field8: Boolean
    }
}


{
    "schema": {
        "Query": {
            "collection1": "[Collection1.Document]",
            "collection2": "[Collection2.Document]"
        }
        "Collection1.Document": {
            "_id": "ID",
            "field1": "String",
            "field2": "Int",
            "field3": "Test"
        },
        "Test": {
            "test1": String,
            "test2": String
        },
        "Collection2.Document": {
            "_id": ID,
            "field9": Int,
            "field8": Boolean
        }
    }
}
